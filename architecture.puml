    @startuml Invoice Manager Architecture

    !theme plain

    ' Define layers with different colors
    package "Presentation Layer" #LightBlue {
        
        class App {
            - scene: Scene
            + start(stage: Stage): void
            + setRoot(fxml: String): void
            - loadFXML(fxml: String): Parent
            + main(args: String[]): void
        }
        
        class PrimaryController {
            - invoiceControl: InvoiceListControl
            - customerField: TextField
            - roomField: TextField
            - unitPriceField: TextField
            - typeComboBox: ComboBox<String>
            - hourField: TextField
            - dayField: TextField
            - invoiceTable: TableView<InvoiceListItem>
            - statusLabel: Label
            + initialize(location: URL, resources: ResourceBundle): void
            - setupTableColumns(): void
            - loadInvoiceData(): void
            - updateStatistics(items: List<InvoiceListItem>): void
            + addInvoice(): void
            + updateInvoice(): void
            + deleteInvoice(): void
            + clearForm(): void
            + refreshTable(): void
            + switchToSecondary(): void
        }
        
        class SecondaryController {
            + switchToPrimary(): void
        }
        
        class InvoiceListItem {
            - id: String
            - date: String
            - customer: String
            - roomId: String
            - type: String
            - unitPrice: String
            - hour: int
            - day: int
            - totalPrice: double
            + InvoiceListItem()
            + InvoiceListItem(...)
            + getId(): String
            + setId(id: String): void
            + getCustomer(): String
            + setCustomer(customer: String): void
            ' ... other getters/setters
        }
        
        class InvoiceListModel {
            + invoices: List<InvoiceListItem>
        }
        
        class Publisher {
            - subscribers: List<Subscriber>
            + registerSubscriber(subscriber: Subscriber): void
            + removeSubscriber(subscriber: Subscriber): void
            + notifySubscribers(): void
        }
        
        interface Subscriber {
            + update(): void
        }
    }

    package "Business Layer" #LightGreen {
        
        class DIContainer {
            - instance: DIContainer {static}
            - invoiceDAOGateway: InvoiceDAOGateway
            - invoiceListControl: InvoiceListControl
            - DIContainer()
            + getInstance(): DIContainer {static}
            + getInvoiceDAOGateway(): InvoiceDAOGateway
            + getInvoiceListControl(): InvoiceListControl
            + reset(): void
        }
        
        class InvoiceListControl {
            - invoiceDAOGateway: InvoiceDAOGateway
            + InvoiceListControl(gateway: InvoiceDAOGateway)
            + getAllInvoiceItems(): List<InvoiceListItem>
            + getAllInvoices(): List<Invoice>
            + getTotalRevenue(): double
            + getTotalInvoiceCount(): int
            + getAverageRevenue(): double
            + closeConnection(): void
        }
        
        abstract class Invoice {
            # id: String
            # date: Date
            # customer: String
            # room_id: String
            # unitPrice: double
            + Invoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double)
            + {abstract} calculateTotal(): double
            + {abstract} type(): String
            + getId(): String
            + getDate(): Date
            + getCustomer(): String
            + getRoomId(): String
            + getUnitPrice(): double
            ' ... setters
        }
        
        class HourlyInvoice {
            - hour: int
            + HourlyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, hour: int)
            + getHour(): int
            + setHour(hour: int): void
            + calculateTotal(): double
            + type(): String
        }
        
        class DailyInvoice {
            - day: int
            + DailyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, day: int)
            + getDay(): int
            + setDay(day: int): void
            + calculateTotal(): double
            + type(): String
        }
        
        class InvoiceFactory {
            + createInvoice(dto: InvoiceDTO): Invoice {static}
            - validateDTO(dto: InvoiceDTO): void {static}
        }
        
        class InvoiceConverter {
            + convertDTOsToInvoiceListItems(dtoList: List<InvoiceDTO>): List<InvoiceListItem> {static}
            + convertDTOToInvoiceListItem(dto: InvoiceDTO): InvoiceListItem {static}
            + convertDTOsToBusinessObjects(dtoList: List<InvoiceDTO>): List<Invoice> {static}
        }
        
        class StatisticsService {
            + calculateTotalRevenue(invoices: List<Invoice>): double {static}
            + countInvoices(invoices: List<Invoice>): int {static}
            + calculateAverageRevenue(invoices: List<Invoice>): double {static}
            + countInvoicesByType(invoices: List<Invoice>, type: String): long {static}
        }
        
        class addInvoice {
            - invoiceDAOGateway: InvoiceDAOGateway
            + addInvoice(gateway: InvoiceDAOGateway)
            + execute(invoice: InvoiceDTO): boolean
        }
    }

    package "Persistence Layer" #LightYellow {
        
        interface InvoiceDAOGateway {
            + getAll(): List<InvoiceDTO>
            + add(invoice: InvoiceDTO): boolean
        }
        
        class InvoiceDAO {
            - conn: Connection
            + InvoiceDAO(authGateway: databaseAuthGateway)
            + getAll(): List<InvoiceDTO>
            + add(invoice: InvoiceDTO): boolean
        }
        
        class InvoiceDTO {
            - id: String
            - date: Date
            - customer: String
            - room_id: String
            - unitPrice: double
            - hour: int
            - day: int
            - type: String
            + InvoiceDTO()
            + InvoiceDTO(...)
            + getId(): String
            + setId(id: String): void
            + getDate(): Date
            + setDate(date: Date): void
            ' ... other getters/setters
        }
        
        interface databaseAuthGateway {
            + getServer(): String
            + getDatabase(): String
            + getUsername(): String
            + getPassword(): String
        }
        
        class databaseKey {
            - server: String
            - database: String
            - username: String
            - password: String
            + databaseKey()
            + getServer(): String
            + getDatabase(): String
            + getUsername(): String
            + getPassword(): String
        }
    }

    ' Basic Relationships Only

    ' Implements
    InvoiceDAOGateway <|.. InvoiceDAO
    databaseAuthGateway <|.. databaseKey
    Subscriber <|.. InvoiceListModel
    
    ' Extends
    Invoice <|-- HourlyInvoice
    Invoice <|-- DailyInvoice
    Publisher <|-- InvoiceListModel

    ' Uses/Dependencies
    App --> PrimaryController
    App --> SecondaryController
    SecondaryController --> App
    PrimaryController --> InvoiceListControl
    PrimaryController --> DIContainer
    PrimaryController --> InvoiceListModel
    InvoiceListControl --> InvoiceDAOGateway
    InvoiceListControl --> InvoiceConverter
    InvoiceListControl --> StatisticsService
    InvoiceConverter --> InvoiceFactory
    InvoiceConverter --> InvoiceDTO
    InvoiceConverter --> InvoiceListItem
    InvoiceFactory --> InvoiceDTO
    InvoiceFactory --> Invoice
    InvoiceDAO --> databaseAuthGateway
    InvoiceDAO --> InvoiceDTO
    DIContainer --> InvoiceDAO
    DIContainer --> databaseKey
    addInvoice --> InvoiceDAOGateway
    addInvoice --> InvoiceDTO
    Publisher --> Subscriber

    ' Associations
    PrimaryController -- InvoiceListItem
    InvoiceListModel -- InvoiceListItem
    DIContainer -- InvoiceDAOGateway
    DIContainer -- InvoiceListControl
    InvoiceDAO -- InvoiceDTO
    StatisticsService -- Invoice

    @enduml
