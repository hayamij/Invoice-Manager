    @startuml Enhanced Invoice Manager Architecture

!theme plain

' Define layers with different colors
package "Presentation Layer" #E3F2FD {
    
    class App {
        - scene: Scene {static}
        + start(stage: Stage): void
        + setRoot(fxml: String): void {static}
        - loadFXML(fxml: String): Parent {static}
        + main(args: String[]): void {static}
    }
    
    class PrimaryController {
        - invoiceControl: InvoiceListControl
        - invoiceListModel: InvoiceListModel
        - customerField: TextField
        - roomField: TextField
        - unitPriceField: TextField
        - typeComboBox: ComboBox<String>
        - hourField: TextField
        - dayField: TextField
        - invoiceTable: TableView<InvoiceListItem>
        - statusLabel: Label
        + initialize(location: URL, resources: ResourceBundle): void
        - setupTableColumns(): void
        - loadInvoiceData(): void
        - updateStatistics(items: List<InvoiceListItem>): void
        + addInvoice(): void
        + updateInvoice(): void
        + deleteInvoice(): void
        + clearForm(): void
        + refreshTable(): void
        + switchToSecondary(): void
    }
    
    class SecondaryController {
        - appSettings: AppSettings
        - companyNameField: TextField
        - companyAddressField: TextField
        - companyPhoneField: TextField
        - defaultInvoiceTypeComboBox: ComboBox<String>
        - defaultHourlyRateSpinner: Spinner<Double>
        - defaultDailyRateSpinner: Spinner<Double>
        - totalInvoicesReportLabel: Label
        - totalRevenueReportLabel: Label
        - averageRevenueLabel: Label
        - hourlyInvoiceCountLabel: Label
        - dailyInvoiceCountLabel: Label
        - statusLabel: Label
        + initialize(location: URL, resources: ResourceBundle): void
        - loadSettings(): void
        + saveSettings(): void
        + resetSettings(): void
        + refreshReports(): void
        + switchToPrimary(): void
        + update(event: InvoiceListEvent): void
    }
    
    class InvoiceListItem {
        - id: String
        - date: String
        - customer: String
        - roomId: String
        - type: String
        - unitPrice: String
        - hour: int
        - day: int
        - totalPrice: double
        + InvoiceListItem()
        + InvoiceListItem(...)
        + getId(): String
        + setId(id: String): void
        + getCustomer(): String
        + setCustomer(customer: String): void
        ' ... other getters/setters with validation
    }
    
    class InvoiceListModel {
        - invoices: ListProperty<InvoiceListItem>
        + InvoiceListModel()
        + invoicesProperty(): ListProperty<InvoiceListItem>
        + getInvoices(): ObservableList<InvoiceListItem>
        + setInvoices(invoices: ObservableList<InvoiceListItem>): void
        + setInvoices(invoiceList: List<InvoiceListItem>): void
        + addInvoice(invoice: InvoiceListItem): void
        + updateInvoice(index: int, invoice: InvoiceListItem): void
        + removeInvoice(invoice: InvoiceListItem): void
        + removeInvoiceById(id: String): void
        + clear(): void
        + size(): int
        + findById(id: String): InvoiceListItem
        + notifyStatisticsUpdate(): void
    }
    
    abstract class Publisher {
        - subscribers: List<Subscriber<T>>
        + registerSubscriber(subscriber: Subscriber<T>): void
        + removeSubscriber(subscriber: Subscriber<T>): void
        + notifySubscribers(): void
        + notifySubscribers(data: T): void
        + getSubscriberCount(): int
        + clearSubscribers(): void
    }
    
    interface Subscriber {
        + update(): void
        + update(data: T): void
        + getSubscriberName(): String
    }
    
    class InvoiceListEvent {
        - eventType: EventType
        - data: Object
        - oldData: Object
        + InvoiceListEvent(eventType: EventType, data: Object)
        + InvoiceListEvent(eventType: EventType, data: Object, oldData: Object)
        + getEventType(): EventType
        + getData(): Object
        + getOldData(): Object
        + toString(): String
    }
    
    class StatisticsData {
        - totalCount: int
        - totalRevenue: double
        - averageRevenue: double
        + StatisticsData(totalCount: int, totalRevenue: double)
        + getTotalCount(): int
        + getTotalRevenue(): double
        + getAverageRevenue(): double
        + toString(): String
    }
    
    class AppSettings {
        - instance: AppSettings {static}
        - companyName: String
        - companyAddress: String
        - companyPhone: String
        - defaultInvoiceType: String
        - defaultHourlyRate: double
        - defaultDailyRate: double
        - AppSettings()
        + getInstance(): AppSettings {static}
        + getCompanyName(): String
        + setCompanyName(name: String): void
        ' ... other getters/setters
        + resetToDefaults(): void
        + saveToFile(): void
    }
}

package "Business Layer" #E8F5E8 {
    
    class DIContainer {
        - instance: DIContainer {static}
        - invoiceDAOGateway: InvoiceDAOGateway
        - invoiceListControl: InvoiceListControl
        - invoiceService: InvoiceService
        - DIContainer()
        + getInstance(): DIContainer {static}
        + getInvoiceDAOGateway(): InvoiceDAOGateway
        + getInvoiceListControl(): InvoiceListControl
        + getInvoiceService(): InvoiceService
        + reset(): void
    }
    
    class InvoiceListControl {
        - invoiceDAOGateway: InvoiceDAOGateway
        + InvoiceListControl(gateway: InvoiceDAOGateway)
        + getAllInvoiceItems(): List<InvoiceListItem>
        + getAllInvoices(): List<Invoice>
        + getTotalRevenue(): double
        + getTotalInvoiceCount(): int
        + getAverageRevenue(): double
        + closeConnection(): void
    }
    
    class InvoiceService {
        - daoGateway: InvoiceDAOGateway
        + InvoiceService(daoGateway: InvoiceDAOGateway)
        + createInvoice(request: InvoiceRequest): boolean
        + getAllInvoices(): List<InvoiceDTO>
        + searchInvoices(criteria: SearchCriteria): List<InvoiceDTO>
        + updateInvoice(id: String, request: InvoiceRequest): boolean
        + deleteInvoice(id: String): boolean
        - convertRequestToDTO(request: InvoiceRequest): InvoiceDTO
    }
    
    class ValidationService {
        + validateInvoiceRequest(request: InvoiceRequest): ValidationResult {static}
        + isValidCustomerName(name: String): boolean {static}
        + isValidRoomId(roomId: String): boolean {static}
        + isValidPricing(unitPrice: double, quantity: int): boolean {static}
        + isValidType(type: String): boolean {static}
    }
    
    class ValidationResult {
        - valid: boolean
        - errorMessage: String
        - ValidationResult(valid: boolean, errorMessage: String)
        + success(): ValidationResult {static}
        + fail(errorMessage: String): ValidationResult {static}
        + isValid(): boolean
        + getErrorMessage(): String
        + toString(): String
    }
    
    class InvoiceRequest {
        - customer: String
        - roomId: String
        - unitPrice: double
        - type: String
        - quantity: int
        + InvoiceRequest()
        + InvoiceRequest(...)
        + getCustomer(): String
        + setCustomer(customer: String): void
        ' ... other getters/setters
        + toString(): String
    }
    
    class SearchCriteria {
        - customerName: String
        - roomId: String
        - type: String
        - fromDate: Date
        - toDate: Date
        - minAmount: Double
        - maxAmount: Double
        + SearchCriteria()
        + getCustomerName(): String
        + setCustomerName(name: String): void
        ' ... other getters/setters
        + toString(): String
    }
    
    abstract class Invoice {
        # id: String
        # date: Date
        # customer: String
        # room_id: String
        # unitPrice: double
        + Invoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double)
        + {abstract} calculateTotal(): double
        + {abstract} type(): String
        + getId(): String
        + getDate(): Date
        + getCustomer(): String
        + getRoomId(): String
        + getUnitPrice(): double
        ' ... setters
    }
    
    class HourlyInvoice {
        - hour: int
        + HourlyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, hour: int)
        + getHour(): int
        + setHour(hour: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class DailyInvoice {
        - day: int
        + DailyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, day: int)
        + getDay(): int
        + setDay(day: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class InvoiceFactory {
        + createInvoice(dto: InvoiceDTO): Invoice {static}
        - validateDTO(dto: InvoiceDTO): void {static}
    }
    
    class InvoiceConverter {
        + convertDTOsToInvoiceListItems(dtoList: List<InvoiceDTO>): List<InvoiceListItem> {static}
        + convertDTOToInvoiceListItem(dto: InvoiceDTO): InvoiceListItem {static}
        + convertDTOsToBusinessObjects(dtoList: List<InvoiceDTO>): List<Invoice> {static}
    }
    
    class StatisticsService {
        + calculateTotalRevenue(invoices: List<Invoice>): double {static}
        + countInvoices(invoices: List<Invoice>): int {static}
        + calculateAverageRevenue(invoices: List<Invoice>): double {static}
        + countInvoicesByType(invoices: List<Invoice>, type: String): long {static}
    }
    
    class addInvoice {
        - invoiceDAOGateway: InvoiceDAOGateway
        + addInvoice(gateway: InvoiceDAOGateway)
        + execute(invoice: InvoiceDTO): boolean
    }
}

package "Persistence Layer" #FFF8E1 {
    
    interface InvoiceDAOGateway {
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    class InvoiceDAO {
        - conn: Connection
        + InvoiceDAO(authGateway: databaseAuthGateway)
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    class InvoiceDTO {
        - id: String
        - date: Date
        - customer: String
        - room_id: String
        - unitPrice: double
        - hour: int
        - day: int
        - type: String
        + InvoiceDTO()
        + InvoiceDTO(...)
        + getId(): String
        + setId(id: String): void
        + getDate(): Date
        + setDate(date: Date): void
        ' ... other getters/setters with validation
    }
    
    interface databaseAuthGateway {
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
    
    class databaseKey {
        - server: String
        - database: String
        - username: String
        - password: String
        + databaseKey()
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
}

' Inheritance relationships
Invoice <|-- HourlyInvoice
Invoice <|-- DailyInvoice
Publisher <|-- InvoiceListModel

' Interface implementations
InvoiceDAOGateway <|.. InvoiceDAO
databaseAuthGateway <|.. databaseKey
Subscriber <|.. SecondaryController

' Dependencies (Uses)
App --> PrimaryController
App --> SecondaryController
PrimaryController --> InvoiceListControl
PrimaryController --> DIContainer
PrimaryController --> InvoiceListModel
PrimaryController --> AppSettings
SecondaryController --> AppSettings
SecondaryController --> DIContainer
InvoiceListControl --> InvoiceDAOGateway
InvoiceListControl --> InvoiceConverter
InvoiceListControl --> StatisticsService
InvoiceService --> InvoiceDAOGateway
InvoiceService --> ValidationService
InvoiceService --> InvoiceRequest
ValidationService --> InvoiceRequest
ValidationService --> ValidationResult
InvoiceConverter --> InvoiceFactory
InvoiceConverter --> InvoiceDTO
InvoiceConverter --> InvoiceListItem
InvoiceFactory --> InvoiceDTO
InvoiceFactory --> Invoice
InvoiceDAO --> databaseAuthGateway
InvoiceDAO --> InvoiceDTO
DIContainer --> InvoiceDAO
DIContainer --> databaseKey
DIContainer --> InvoiceService
addInvoice --> InvoiceDAOGateway
addInvoice --> InvoiceDTO
Publisher --> Subscriber

' Event-driven relationships
InvoiceListModel --> InvoiceListEvent
InvoiceListModel --> StatisticsData
SecondaryController --> InvoiceListEvent
SecondaryController --> StatisticsData

' Associations
PrimaryController -- InvoiceListItem
InvoiceListModel -- InvoiceListItem
DIContainer -- InvoiceDAOGateway
DIContainer -- InvoiceListControl
DIContainer -- InvoiceService
InvoiceDAO -- InvoiceDTO
StatisticsService -- Invoice

note right of Publisher
  <b>Enhanced Observer Pattern</b>
  - Generic support <T>
  - Thread-safe implementation
  - Event data passing
  - Error handling
end note

note right of SecondaryController
  <b>Settings & Reports Screen</b>
  - Company configuration
  - Default values management
  - Real-time business reports
  - Subscriber for auto-updates
end note

note right of InvoiceListModel
  <b>Hybrid Model</b>
  - JavaFX Properties binding
  - Observer pattern events
  - Real-time notifications
  - Statistics calculation
end note

note right of InvoiceService
  <b>Enhanced Business Service</b>
  - CRUD operations
  - Validation integration
  - Request/Response pattern
  - Search capabilities
end note

note right of DIContainer
  <b>Enhanced DI Container</b>
  - All services managed
  - Proper dependency injection
  - Service lifecycle management
  - Testing support
end note

@enduml
