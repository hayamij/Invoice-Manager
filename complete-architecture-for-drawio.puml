@startuml Invoice Manager Complete Architecture

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

package "Presentation Layer" #E3F2FD {
    
    class App {
        - scene: Scene {static}
        --
        + start(stage: Stage): void
        + setRoot(fxml: String): void {static}
        - loadFXML(fxml: String): Parent {static}
        + main(args: String[]): void {static}
    }
    
    class PrimaryController {
        - invoiceControl: InvoiceListControl
        - customerField: TextField
        - roomField: TextField  
        - unitPriceField: TextField
        - typeComboBox: ComboBox<String>
        - hourField: TextField
        - dayField: TextField
        - hourLabel: Label
        - dayLabel: Label
        - addButton: Button
        - updateButton: Button
        - deleteButton: Button
        - clearButton: Button
        - refreshButton: Button
        - invoiceTable: TableView<InvoiceListItem>
        - idColumn: TableColumn<InvoiceListItem, String>
        - dateColumn: TableColumn<InvoiceListItem, String>
        - customerColumn: TableColumn<InvoiceListItem, String>
        - roomColumn: TableColumn<InvoiceListItem, String>
        - typeColumn: TableColumn<InvoiceListItem, String>
        - unitPriceColumn: TableColumn<InvoiceListItem, Double>
        - hourColumn: TableColumn<InvoiceListItem, Integer>
        - dayColumn: TableColumn<InvoiceListItem, Integer>
        - totalColumn: TableColumn<InvoiceListItem, Double>
        - statusLabel: Label
        - totalInvoicesLabel: Label
        - totalAmountLabel: Label
        --
        + initialize(location: URL, resources: ResourceBundle): void
        - setupTableColumns(): void
        - loadInvoiceData(): void
        - updateStatistics(items: List<InvoiceListItem>): void
        + addInvoice(): void
        + updateInvoice(): void
        + deleteInvoice(): void
        + clearForm(): void
        + refreshTable(): void
        + switchToSecondary(): void
    }
    
    class SecondaryController {
        --
        + switchToPrimary(): void
    }
    
    class InvoiceListItem {
        - id: String
        - date: String
        - customer: String
        - roomId: String
        - type: String
        - unitPrice: String
        - hour: int
        - day: int
        - totalPrice: double
        --
        + InvoiceListItem()
        + InvoiceListItem(id: String, date: String, customer: String, roomId: String, type: String, unitPrice: String, hour: int, day: int, totalPrice: double)
        + getId(): String
        + setId(id: String): void
        + getDate(): String
        + setDate(date: String): void
        + getCustomer(): String
        + setCustomer(customer: String): void
        + getRoomId(): String
        + setRoomId(roomId: String): void
        + getType(): String
        + setType(type: String): void
        + getUnitPrice(): String
        + setUnitPrice(unitPrice: String): void
        + getHour(): int
        + setHour(hour: int): void
        + getDay(): int
        + setDay(day: int): void
        + getTotalPrice(): double
        + setTotalPrice(totalPrice: double): void
    }
    
    class InvoiceListModel {
        + invoices: List<InvoiceListItem>
    }
    
    class Publisher {
        - subscribers: List<Subscriber>
        --
        + registerSubscriber(subscriber: Subscriber): void
        + removeSubscriber(subscriber: Subscriber): void
        + notifySubscribers(): void
    }
    
    interface Subscriber {
        + update(): void
    }
}

package "Business Layer" #E8F5E8 {
    
    class DIContainer <<Singleton>> {
        - instance: DIContainer {static}
        - invoiceDAOGateway: InvoiceDAOGateway
        - invoiceListControl: InvoiceListControl
        --
        - DIContainer()
        + getInstance(): DIContainer {static}
        + getInvoiceDAOGateway(): InvoiceDAOGateway
        + getInvoiceListControl(): InvoiceListControl
        + reset(): void
    }
    
    class InvoiceListControl {
        - invoiceDAOGateway: InvoiceDAOGateway
        --
        + InvoiceListControl(gateway: InvoiceDAOGateway)
        + getAllInvoiceItems(): List<InvoiceListItem>
        + getAllInvoices(): List<Invoice>
        + getTotalRevenue(): double
        + getTotalInvoiceCount(): int
        + getAverageRevenue(): double
        + closeConnection(): void
    }
    
    abstract class Invoice {
        # id: String
        # date: Date
        # customer: String
        # room_id: String
        # unitPrice: double
        --
        + Invoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double)
        + {abstract} calculateTotal(): double
        + {abstract} type(): String
        + getId(): String
        + getDate(): Date
        + getCustomer(): String
        + getRoomId(): String
        + getUnitPrice(): double
        + setId(id: String): void
        + setDate(date: Date): void
        + setCustomer(customer: String): void
        + setRoomId(room_id: String): void
        + setUnitPrice(unitPrice: double): void
    }
    
    class HourlyInvoice {
        - hour: int
        --
        + HourlyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, hour: int)
        + getHour(): int
        + setHour(hour: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class DailyInvoice {
        - day: int
        --
        + DailyInvoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double, day: int)
        + getDay(): int
        + setDay(day: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class InvoiceFactory <<Factory>> {
        --
        + createInvoice(dto: InvoiceDTO): Invoice {static}
        - validateDTO(dto: InvoiceDTO): void {static}
    }
    
    class InvoiceConverter <<Service>> {
        --
        + convertDTOsToInvoiceListItems(dtoList: List<InvoiceDTO>): List<InvoiceListItem> {static}
        + convertDTOToInvoiceListItem(dto: InvoiceDTO): InvoiceListItem {static}
        + convertDTOsToBusinessObjects(dtoList: List<InvoiceDTO>): List<Invoice> {static}
    }
    
    class StatisticsService <<Service>> {
        --
        + calculateTotalRevenue(invoices: List<Invoice>): double {static}
        + countInvoices(invoices: List<Invoice>): int {static}
        + calculateAverageRevenue(invoices: List<Invoice>): double {static}
        + countInvoicesByType(invoices: List<Invoice>, type: String): long {static}
    }
    
    class addInvoice {
        - invoiceDAOGateway: InvoiceDAOGateway
        --
        + addInvoice(gateway: InvoiceDAOGateway)
        + execute(invoice: InvoiceDTO): boolean
    }
}

package "Persistence Layer" #FFF8E1 {
    
    interface InvoiceDAOGateway {
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    class InvoiceDAO {
        - conn: Connection
        --
        + InvoiceDAO(authGateway: databaseAuthGateway)
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    class InvoiceDTO {
        - id: String
        - date: Date
        - customer: String
        - room_id: String
        - unitPrice: double
        - hour: int
        - day: int
        - type: String
        --
        + InvoiceDTO()
        + InvoiceDTO(id: String, date: Date, customer: String, room_id: String, unitPrice: double, hour: int, day: int, type: String)
        + getId(): String
        + setId(id: String): void
        + getDate(): Date
        + setDate(date: Date): void
        + getCustomer(): String
        + setCustomer(customer: String): void
        + getRoom_id(): String
        + setRoom_id(room_id: String): void
        + getUnitPrice(): double
        + setUnitPrice(unitPrice: double): void
        + getHour(): int
        + setHour(hour: int): void
        + getDay(): int
        + setDay(day: int): void
        + getType(): String
        + setType(type: String): void
    }
    
    interface databaseAuthGateway {
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
    
    class databaseKey {
        - server: String
        - database: String
        - username: String
        - password: String
        --
        + databaseKey()
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
}

' Inheritance relationships
Invoice <|-- HourlyInvoice
Invoice <|-- DailyInvoice
Publisher <|-- InvoiceListModel

' Interface implementations
InvoiceDAOGateway <|.. InvoiceDAO
databaseAuthGateway <|.. databaseKey
Subscriber <|.. InvoiceListModel

' Dependencies (Uses)
App --> PrimaryController
App --> SecondaryController
SecondaryController --> App
PrimaryController --> InvoiceListControl
PrimaryController --> DIContainer
PrimaryController --> InvoiceListModel
InvoiceListControl --> InvoiceDAOGateway
InvoiceListControl --> InvoiceConverter
InvoiceListControl --> StatisticsService
InvoiceConverter --> InvoiceFactory
InvoiceConverter --> InvoiceDTO
InvoiceConverter --> InvoiceListItem
InvoiceFactory --> InvoiceDTO
InvoiceFactory --> Invoice
InvoiceDAO --> databaseAuthGateway
InvoiceDAO --> InvoiceDTO
DIContainer --> InvoiceDAO
DIContainer --> databaseKey
addInvoice --> InvoiceDAOGateway
addInvoice --> InvoiceDTO
Publisher --> Subscriber

' Associations
PrimaryController -- InvoiceListItem
InvoiceListModel -- InvoiceListItem
DIContainer -- InvoiceDAOGateway
DIContainer -- InvoiceListControl
InvoiceDAO -- InvoiceDTO
StatisticsService -- Invoice

@enduml
