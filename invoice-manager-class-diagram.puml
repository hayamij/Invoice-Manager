@startuml Invoice Manager Class Diagram

!theme plain
skinparam backgroundColor white
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle

package "presentation" {
    class App {
        - scene : Scene
        + start(stage : Stage) : void
        + setRoot(fxml : String) : void
        - loadFXML(fxml : String) : Parent
        + main(args : String[]) : void
    }

    class PrimaryController {
        - invoiceControl : InvoiceListControl
        - invoiceListModel : InvoiceListModel
        - searchField : TextField
        - searchButton : Button
        - clearSearchButton : Button
        - customerField : TextField
        - roomField : TextField
        - unitPriceField : TextField
        - typeComboBox : ComboBox<String>
        - hourField : TextField
        - dayField : TextField
        - hourLabel : Label
        - dayLabel : Label
        - addButton : Button
        - updateButton : Button
        - deleteButton : Button
        - clearButton : Button
        - refreshButton : Button
        - invoiceTable : TableView<InvoiceListItem>
        - idColumn : TableColumn<InvoiceListItem, String>
        - dateColumn : TableColumn<InvoiceListItem, String>
        - customerColumn : TableColumn<InvoiceListItem, String>
        - roomColumn : TableColumn<InvoiceListItem, String>
        - typeColumn : TableColumn<InvoiceListItem, String>
        - unitPriceColumn : TableColumn<InvoiceListItem, Double>
        - hourColumn : TableColumn<InvoiceListItem, Integer>
        - dayColumn : TableColumn<InvoiceListItem, Integer>
        - totalColumn : TableColumn<InvoiceListItem, Double>
        - statusLabel : Label
        - totalInvoicesLabel : Label
        - totalAmountLabel : Label
        - monthlyStatsButton : Button
        + initialize(location : URL, resources : ResourceBundle) : void
        - setupTableColumns() : void
        - loadInvoiceData() : void
        - updateStatistics(invoiceItems : List<InvoiceListItem>) : void
        + addInvoice() : void
        + updateInvoice() : void
        + deleteInvoice() : void
        + clearForm() : void
        + refreshTable() : void
        + searchInvoices() : void
        + clearSearch() : void
        + showMonthlyStats() : void
    }

    class InvoiceListModel {
        - invoices : ListProperty<InvoiceListItem>
        - subscribers : List<Subscriber>
        + InvoiceListModel()
        + registerSubscriber(subscriber : Subscriber) : void
        + removeSubscriber(subscriber : Subscriber) : void
        + notifySubscribers() : void
        + invoicesProperty() : ListProperty<InvoiceListItem>
        + getInvoices() : ObservableList<InvoiceListItem>
        + setInvoices(invoices : ObservableList<InvoiceListItem>) : void
        + setInvoices(invoiceList : List<InvoiceListItem>) : void
        + addInvoice(invoice : InvoiceListItem) : void
        + updateInvoice(index : int, invoice : InvoiceListItem) : void
        + removeInvoice(invoice : InvoiceListItem) : void
        + removeInvoiceById(id : String) : void
        + clear() : void
        + size() : int
        + findById(id : String) : InvoiceListItem
        + notifyStatisticsUpdate() : void
    }
}

package "business" {
    abstract class Invoice {
        # id : String
        # date : Date
        # customer : String
        # room_id : String
        # unitPrice : double
        # Invoice(id : String, date : Date, customer : String, room_id : String, unitPrice : double)
        + {abstract} calculateTotal() : double
        + {abstract} type() : String
        + getId() : String
        + getDate() : Date
        + getCustomer() : String
        + getRoomId() : String
        + getUnitPrice() : double
        + setId(id : String) : void
        + setDate(date : Date) : void
        + setCustomer(customer : String) : void
        + setRoomId(room_id : String) : void
        + setUnitPrice(unitPrice : double) : void
    }

    class HourlyInvoice {
        - hour : int
        + HourlyInvoice(id : String, date : Date, customer : String, room_id : String, unitPrice : double, hour : int)
        + getHour() : int
        + setHour(hour : int) : void
        + calculateTotal() : double
        + type() : String
    }

    class DailyInvoice {
        - day : int
        + DailyInvoice(id : String, date : Date, customer : String, room_id : String, unitPrice : double, day : int)
        + getDay() : int
        + setDay(day : int) : void
        + calculateTotal() : double
        + type() : String
    }

    class InvoiceFactory {
        + {static} createInvoice(dto : InvoiceDTO) : Invoice
        - {static} validateDTO(dto : InvoiceDTO) : void
    }

    class InvoiceListControl {
        - invoiceDAOGateway : InvoiceDAOGateway
        + InvoiceListControl(invoiceDAOGateway : InvoiceDAOGateway)
        + {static} createInstance() : InvoiceListControl
        + getAllInvoiceItems() : List<InvoiceListItem>
        + getAllInvoices() : List<Invoice>
        + closeConnection() : void
        + getTotalRevenue() : double
        + getTotalInvoiceCount() : int
        + getAverageRevenue() : double
        - convertDTOsToInvoiceListItems(dtoList : List<InvoiceDTO>) : List<InvoiceListItem>
        - convertDTOToInvoiceListItem(dto : InvoiceDTO) : InvoiceListItem
        - convertDTOsToBusinessObjects(dtoList : List<InvoiceDTO>) : List<Invoice>
    }

    class InvoiceRequest {
        - customer : String
        - roomId : String
        - unitPrice : double
        - type : String
        - quantity : int
        + InvoiceRequest()
        + InvoiceRequest(customer : String, roomId : String, unitPrice : double, type : String, quantity : int)
        + getCustomer() : String
        + setCustomer(customer : String) : void
        + getRoomId() : String
        + setRoomId(roomId : String) : void
        + getUnitPrice() : double
        + setUnitPrice(unitPrice : double) : void
        + getType() : String
        + setType(type : String) : void
        + getQuantity() : int
        + setQuantity(quantity : int) : void
        + toString() : String
    }

    class InvoiceService {
        - daoGateway : InvoiceDAOGateway
        + InvoiceService(daoGateway : InvoiceDAOGateway)
        + createInvoice(request : InvoiceRequest) : boolean
        + getAllInvoices() : List<InvoiceDTO>
        + searchInvoices(criteria : SearchCriteria) : List<InvoiceDTO>
        + updateInvoice(id : String, request : InvoiceRequest) : boolean
        + deleteInvoice(id : String) : boolean
        - convertRequestToDTO(request : InvoiceRequest) : InvoiceDTO
    }

    class SearchCriteria {
        - customerName : String
        - roomId : String
        - type : String
        - fromDate : Date
        - toDate : Date
        - minAmount : Double
        - maxAmount : Double
        + SearchCriteria()
        + getCustomerName() : String
        + setCustomerName(customerName : String) : void
        + getRoomId() : String
        + setRoomId(roomId : String) : void
        + getType() : String
        + setType(type : String) : void
        + getFromDate() : Date
        + setFromDate(fromDate : Date) : void
        + getToDate() : Date
        + setToDate(toDate : Date) : void
        + getMinAmount() : Double
        + setMinAmount(minAmount : Double) : void
        + getMaxAmount() : Double
        + setMaxAmount(maxAmount : Double) : void
        + toString() : String
    }

    class StatisticsService {
        + {static} calculateTotalRevenue(invoices : List<Invoice>) : double
        + {static} countInvoices(invoices : List<Invoice>) : int
        + {static} calculateAverageRevenue(invoices : List<Invoice>) : double
        + {static} countInvoicesByType(invoices : List<Invoice>, type : String) : long
        + {static} calculateMonthlyAverageRevenue(invoices : List<Invoice>) : Map<String, Double>
        + {static} countByRoomType(invoices : List<Invoice>) : Map<String, Long>
    }

    class StatisticsData {
        - totalCount : int
        - totalRevenue : double
        - averageRevenue : double
        + StatisticsData(totalCount : int, totalRevenue : double)
        + getTotalCount() : int
        + getTotalRevenue() : double
        + getAverageRevenue() : double
        + toString() : String
    }

    class ValidationService {
        + {static} validateInvoiceRequest(request : InvoiceRequest) : ValidationResult
        + {static} isValidCustomerName(name : String) : boolean
        + {static} isValidRoomId(roomId : String) : boolean
        + {static} isValidPricing(unitPrice : double, quantity : int) : boolean
        + {static} isValidType(type : String) : boolean
    }

    class ValidationResult {
        - valid : boolean
        - errorMessage : String
        - ValidationResult(valid : boolean, errorMessage : String)
        + {static} success() : ValidationResult
        + {static} fail(errorMessage : String) : ValidationResult
        + isValid() : boolean
        + getErrorMessage() : String
        + toString() : String
    }

    class InvoiceListItem {
        - id : String
        - date : String
        - customer : String
        - roomId : String
        - type : String
        - unitPrice : String
        - hour : int
        - day : int
        - totalPrice : double
        + InvoiceListItem()
        + InvoiceListItem(id : String, date : String, customer : String, roomId : String, type : String, unitPrice : String, hour : int, day : int, totalPrice : double)
        + getId() : String
        + getDate() : String
        + getCustomer() : String
        + getRoomId() : String
        + getType() : String
        + getUnitPrice() : String
        + getHour() : int
        + getDay() : int
        + getTotalPrice() : double
        + setId(id : String) : void
        + setDate(date : String) : void
        + setCustomer(customer : String) : void
        + setRoomId(roomId : String) : void
        + setType(type : String) : void
        + setUnitPrice(unitPrice : String) : void
        + setHour(hour : int) : void
        + setDay(day : int) : void
        + setTotalPrice(totalPrice : double) : void
    }
}

package "persistence" {
    class InvoiceDTO {
        - id : String
        - date : Date
        - customer : String
        - room_id : String
        - unitPrice : double
        - hour : int
        - day : int
        - type : String
        + InvoiceDTO()
        + InvoiceDTO(id : String, date : Date, customer : String, room_id : String, unitPrice : double, hour : int, day : int, type : String)
        + getId() : String
        + getDate() : Date
        + getCustomer() : String
        + getRoom_id() : String
        + getUnitPrice() : double
        + getHour() : int
        + getDay() : int
        + getType() : String
        + setId(id : String) : void
        + setDate(date : Date) : void
        + setCustomer(customer : String) : void
        + setRoom_id(room_id : String) : void
        + setUnitPrice(unitPrice : double) : void
        + setHour(hour : int) : void
        + setDay(day : int) : void
        + setType(type : String) : void
    }

    interface InvoiceDAOGateway {
        + getAll() : List<InvoiceDTO>
        + add(invoice : InvoiceDTO) : boolean
    }

    class InvoiceDAO {
        - conn : Connection
        + InvoiceDAO(databaseAuthGateway : databaseAuthGateway)
        + getAll() : List<InvoiceDTO>
        + add(invoice : InvoiceDTO) : boolean
    }

    interface databaseAuthGateway {
        + getServer() : String
        + getDatabase() : String
        + getUsername() : String
        + getPassword() : String
    }

    class databaseKey {
        - server : String
        - database : String
        - username : String
        - password : String
        + databaseKey()
        + getServer() : String
        + getDatabase() : String
        + getUsername() : String
        + getPassword() : String
    }
}

' Inheritance relationships
HourlyInvoice --|> Invoice
DailyInvoice --|> Invoice

' Interface implementations
InvoiceDAO ..|> InvoiceDAOGateway
databaseKey ..|> databaseAuthGateway

' Dependency relationships with labels (NO arrows from lower layers to upper layers)
PrimaryController --> InvoiceListControl : InvoiceListControl
PrimaryController --> InvoiceListModel : InvoiceListModel
PrimaryController --> StatisticsService : StatisticsService
PrimaryController --> InvoiceListItem : InvoiceListItem
InvoiceListModel --> InvoiceListItem : InvoiceListItem
InvoiceListControl --> InvoiceDAOGateway : InvoiceDAOGateway
InvoiceListControl --> StatisticsService : StatisticsService
InvoiceListControl --> InvoiceFactory : InvoiceFactory
InvoiceListControl --> InvoiceListItem : InvoiceListItem
InvoiceListControl --> Invoice : Invoice
InvoiceFactory --> Invoice : Invoice
InvoiceFactory --> InvoiceDTO : InvoiceDTO
InvoiceService --> InvoiceDAOGateway : InvoiceDAOGateway
InvoiceService --> ValidationService : ValidationService
InvoiceService --> InvoiceRequest : InvoiceRequest
InvoiceService --> InvoiceDTO : InvoiceDTO
ValidationService --> InvoiceRequest : InvoiceRequest
InvoiceDAO --> databaseAuthGateway : databaseAuthGateway

' Nested classes relationships
InvoiceService +-- SearchCriteria
StatisticsService +-- StatisticsData
ValidationService +-- ValidationResult

@enduml