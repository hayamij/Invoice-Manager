@startuml Invoice Manager - Class Diagram (Dependency Focused)

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam packageFontSize 14
skinparam linetype ortho

package "Presentation Layer" {
    class App {
        - scene: Scene {static}
        + start(stage: Stage): void
        + setRoot(fxml: String): void {static}
        - loadFXML(fxml: String): Parent {static}
        + main(args: String[]): void {static}
    }
    
    class PrimaryController {
        - invoiceControl: InvoiceListControl
        - customerField: TextField
        - roomField: TextField
        - unitPriceField: TextField
        - typeComboBox: ComboBox<String>
        - invoiceTable: TableView<Invoice>
        - statusLabel: Label
        --
        + initialize(location: URL, resources: ResourceBundle): void
        + addInvoice(): void
        + updateInvoice(): void
        + deleteInvoice(): void
        + clearForm(): void
        + refreshTable(): void
    }
    
    class SecondaryController {
        + switchToPrimary(): void
    }
    
    class InvoiceListItem {
        + id: String
        + date: String
        + customer: String
        + room_id: String
        + type: String
        + unitPrice: String
        + hour: int
        + day: int
        + totalPrice: double
    }
    
    class InvoiceListModel {
        + invoices: List<InvoiceListItem>
    }
    
    interface Subscriber {
        + update(): void
    }
    
    class Publisher {
        - subscribers: List<Subscriber>
        --
        + registerSubscriber(subscriber: Subscriber): void
        + removeSubscriber(subscriber: Subscriber): void
        + notifySubscribers(): void
    }
}

package "Business Layer" {
    abstract class Invoice {
        # id: String
        # date: Date
        # customer: String
        # room_id: String
        # unitPrice: double
        --
        + Invoice(id: String, date: Date, customer: String, room_id: String, unitPrice: double)
        + {abstract} calculateTotal(): double
        + {abstract} type(): String
        --
        + getId(): String
        + getDate(): Date
        + getCustomer(): String
        + getRoomId(): String
        + getUnitPrice(): double
    }
    
    class HourlyInvoice {
        - hour: int
        --
        + HourlyInvoice(...)
        + getHour(): int
        + setHour(hour: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class DailyInvoice {
        - day: int
        --
        + DailyInvoice(...)
        + getDay(): int
        + setDay(day: int): void
        + calculateTotal(): double
        + type(): String
    }
    
    class InvoiceListControl {
        - invoiceDAOGateway: InvoiceDAOGateway
        --
        + InvoiceListControl(invoiceDAOGateway: InvoiceDAOGateway)
        + getAllInvoices(): List<Invoice>
        + getAllInvoiceItems(): List<InvoiceListItem>
        + getTotalRevenue(): double
        + getTotalInvoiceCount(): int
    }
    
    class addInvoice {
        - invoiceDAOGateway: InvoiceDAOGateway
        --
        + addInvoice(invoiceDAOGateway: InvoiceDAOGateway)
        + execute(invoice: InvoiceDTO): boolean
    }
}

package "Persistence Layer" {
    class InvoiceDAO {
        - conn: Connection
        --
        + InvoiceDAO(databaseAuthGateway: databaseAuthGateway)
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    interface InvoiceDAOGateway {
        + getAll(): List<InvoiceDTO>
        + add(invoice: InvoiceDTO): boolean
    }
    
    class InvoiceDTO {
        + id: String
        + date: Date
        + customer: String
        + room_id: String
        + unitPrice: double
        + hour: int
        + day: int
        + type: String
    }
    
    interface databaseAuthGateway {
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
    
    class databaseKey {
        - server: String
        - database: String
        - username: String
        - password: String
        --
        + databaseKey()
        + getServer(): String
        + getDatabase(): String
        + getUsername(): String
        + getPassword(): String
    }
}

' === INHERITANCE RELATIONSHIPS ONLY ===
HourlyInvoice --|> Invoice : extends
DailyInvoice --|> Invoice : extends
InvoiceListModel --|> Publisher : extends

' === INTERFACE IMPLEMENTATION ONLY ===
databaseKey ..|> databaseAuthGateway : implements
InvoiceDAO ..|> InvoiceDAOGateway : implements

' === DEPENDENCY RELATIONSHIPS (PRIORITY) ===
' Application Layer Dependencies
App ..> PrimaryController : loads
PrimaryController ..> InvoiceListControl : calls methods
PrimaryController ..> InvoiceDAO : creates
PrimaryController ..> databaseKey : creates
PrimaryController ..> InvoiceListItem : displays
SecondaryController ..> App : calls setRoot()

' Business Layer Dependencies  
InvoiceListControl ..> InvoiceDAOGateway : depends on
InvoiceListControl ..> InvoiceListItem : creates
addInvoice ..> InvoiceDAOGateway : uses

' Presentation-Business Dependencies
InvoiceListModel ..> InvoiceListItem : uses

' Persistence Layer Dependencies
InvoiceDAO ..> databaseAuthGateway : uses
InvoiceDAO ..> InvoiceDTO : returns

' Observer Pattern Dependencies
Publisher ..> Subscriber : notifies

' === NOTES ===
note top of Invoice : Abstract Template\nDefines invoice contract
note top of InvoiceListControl : Business Controller\nDirect dependency injection\nProvides presentation models
note top of databaseAuthGateway : Configuration Interface\nDatabase credentials
note top of InvoiceDAOGateway : Data Access Interface\nRepository pattern
note bottom of Publisher : Observer Pattern\nDecoupled notifications

note as N1
  <b>CLEAN ARCHITECTURE DESIGN</b>
  ============================
  • Presentation layer isolated from business entities
  • PrimaryController only uses InvoiceListItem (presentation model)
  • InvoiceListControl provides getAllInvoiceItems() method
  • Business Invoice entities protected in business layer
  • Clean separation of concerns
  • Direct dependency creation (no DIContainer)
  • Publisher-Subscriber Observer pattern
end note

@enduml
