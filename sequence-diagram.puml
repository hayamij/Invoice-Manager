@startuml Invoice Manager Sequence Diagram

!theme plain

title Invoice Data Loading Flow

actor User
participant "PrimaryController" as PC
participant "DIContainer" as DI
participant "InvoiceListControl" as ILC
participant "InvoiceDAOGateway" as DAO
participant "InvoiceDAO" as IMPL
participant "InvoiceConverter" as CONV
participant "InvoiceFactory" as FACT
participant "StatisticsService" as STATS
participant "Database" as DB

== Application Initialization ==

User -> PC : Launch Application
activate PC

PC -> DI : getInstance()
activate DI
DI -> DI : create if null
DI --> PC : DIContainer instance
deactivate DI

PC -> DI : getInvoiceListControl()
activate DI

DI -> DI : getInvoiceDAOGateway()
activate DI
DI -> IMPL : new InvoiceDAO(databaseKey)
activate IMPL
IMPL -> DB : establish connection
DB --> IMPL : connection established
IMPL --> DI : InvoiceDAO instance
deactivate IMPL

DI -> ILC : new InvoiceListControl(gateway)
activate ILC
ILC --> DI : InvoiceListControl instance
deactivate ILC

DI --> PC : InvoiceListControl instance
deactivate DI

== Load Invoice Data ==

PC -> PC : loadInvoiceData()
activate PC

PC -> ILC : getAllInvoiceItems()
activate ILC

ILC -> DAO : getAll()
activate DAO

DAO -> DB : SELECT * FROM invoices
activate DB
DB --> DAO : ResultSet
deactivate DB

DAO -> DAO : convert ResultSet to DTOs
DAO --> ILC : List<InvoiceDTO>
deactivate DAO

ILC -> CONV : convertDTOsToInvoiceListItems(dtoList)
activate CONV

loop for each DTO
    CONV -> CONV : convertDTOToInvoiceListItem(dto)
    activate CONV
    CONV -> CONV : calculate total price
    CONV --> CONV : InvoiceListItem
    deactivate CONV
end

CONV --> ILC : List<InvoiceListItem>
deactivate CONV

ILC --> PC : List<InvoiceListItem>
deactivate ILC

PC -> PC : updateStatistics(items)
activate PC
PC -> PC : calculate counts and totals
PC -> PC : update UI labels
deactivate PC

PC -> PC : update TableView
PC --> User : Display invoice list
deactivate PC
deactivate PC

== Add New Invoice (Future Implementation) ==

User -> PC : Click Add Invoice
activate PC

PC -> PC : validateForm()
PC -> ILC : addInvoice(invoiceData)
activate ILC

ILC -> DAO : add(invoiceDTO)
activate DAO

DAO -> DB : INSERT INTO invoices
activate DB
DB --> DAO : success/failure
deactivate DB

DAO --> ILC : boolean result
deactivate DAO

alt successful addition
    ILC -> PC : true
    PC -> PC : refreshTable()
    PC -> PC : loadInvoiceData()
    PC --> User : Show success message
else addition failed
    ILC -> PC : false
    PC --> User : Show error message
end

deactivate ILC
deactivate PC

== Statistics Calculation ==

User -> PC : Request Statistics
activate PC

PC -> ILC : getAllInvoices()
activate ILC

ILC -> DAO : getAll()
activate DAO
DAO --> ILC : List<InvoiceDTO>
deactivate DAO

ILC -> CONV : convertDTOsToBusinessObjects(dtoList)
activate CONV

loop for each DTO
    CONV -> FACT : createInvoice(dto)
    activate FACT
    alt dto.type == "hourly"
        FACT -> FACT : new HourlyInvoice(...)
    else dto.type == "daily"
        FACT -> FACT : new DailyInvoice(...)
    end
    FACT --> CONV : Invoice instance
    deactivate FACT
end

CONV --> ILC : List<Invoice>
deactivate CONV

ILC --> PC : List<Invoice>
deactivate ILC

PC -> STATS : calculateTotalRevenue(invoices)
activate STATS
STATS -> STATS : stream().mapToDouble(Invoice::calculateTotal).sum()
STATS --> PC : total revenue
deactivate STATS

PC -> STATS : countInvoices(invoices)
activate STATS
STATS --> PC : invoice count
deactivate STATS

PC -> PC : updateStatisticsDisplay()
PC --> User : Show updated statistics
deactivate PC

@enduml
